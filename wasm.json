{
  "nodes": [
    {
      "id": "atomics-wait-on-main-thread",
      "title": "Atomics.wait on main thread",
      "description": "Remove restriction from blocking the main thread to remove spin-loop hacks that users are currently doing.",
      "dependsOn": [
        "relaxed-atomics"
      ]
    },
    {
      "id": "binary-view-of-wasm-files-in-wasm-explorer",
      "title": "Binary view of wasm files in wasm-explorer",
      "description": "",
      "dependsOn": [
        "make-wasm-binaries-readable"
      ]
    },
    {
      "id": "byob-readable-streams",
      "title": "BYOB readable streams",
      "description": "[Adapt readable streams spec to work with wasm shared memory](https://github.com/WebAssembly/memory-control/blob/main/proposals/memory-control/byob.md)",
      "dependsOn": [
        "memory-discard"
      ]
    },
    {
      "id": "call-indirect-speculative-inlining",
      "title": "call_indirect speculative inlining",
      "description": "Speculate monomorphic/polymorphic call_indirect instructions, like we do with call_ref.",
      "dependsOn": [
        "performance"
      ]
    },
    {
      "id": "can-we-do-persistent-cross-site-caching-somehow",
      "title": "Can we do persistent cross-site caching somehow?",
      "description": "",
      "dependsOn": [
        "shrink-wasm-binaries"
      ]
    },
    {
      "id": "compact-import-section",
      "title": "Compact import section",
      "description": "",
      "dependsOn": [
        "shrink-wasm-binaries"
      ]
    },
    {
      "id": "component-model-async",
      "title": "Component Model Async",
      "description": "",
      "dependsOn": [
        "component-model-mvp-with-js-bindings"
      ]
    },
    {
      "id": "component-model-mvp-with-js-bindings",
      "title": "Component Model MVP with JS bindings",
      "description": "[Portable, composable, separately compiled, wasm components](https://github.com/WebAssembly/component-model)",
      "dependsOn": [
        "sketch-of-component-model-webidl-bindings"
      ]
    },
    {
      "id": "custom-descriptors",
      "title": "Custom descriptors",
      "description": "[Store wasm values in the RTT of a GC object for space savings](https://github.com/WebAssembly/custom-descriptors)",
      "dependsOn": [
        "wasm-gc-parity-with-native"
      ]
    },
    {
      "id": "esm-integration",
      "title": "ESM integration",
      "description": "[Integrate wasm modules into the ESM loader](https://github.com/WebAssembly/esm-integration)",
      "dependsOn": [
        "source-phase-imports"
      ]
    },
    {
      "id": "get-rid-of-uleb",
      "title": "Get rid of ULEB",
      "description": "(I'm serious)",
      "dependsOn": [
        "shrink-wasm-binaries"
      ]
    },
    {
      "id": "implement-component-model-webidl-bindings-in-a-dumb-way",
      "title": "Implement Component Model WebIDL bindings in a dumb way",
      "description": "Map component types with WebIDL types to allow direct importing of WebIDL interfaces.",
      "dependsOn": [
        "component-model-mvp-with-js-bindings"
      ]
    },
    {
      "id": "improved-array-constructors",
      "title": "Improved array constructors",
      "description": "",
      "dependsOn": [
        "multi-byte-access-to-arrays"
      ]
    },
    {
      "id": "in-memory-caching-of-modules",
      "title": "In-memory caching of modules",
      "description": "Add an in-memory cache of compiled wasm modules. Integrate with the browser script loader when we have esm-integration.",
      "dependsOn": [
        "update-caching-to-work-with-lazy-tiering"
      ]
    },
    {
      "id": "inline-subset-of-wasm-into-js",
      "title": "Inline subset of wasm into JS",
      "description": "Inline a small subset of wasm opcodes into JS. Improves performance of tiny accessors functions.",
      "dependsOn": [
        "support-more-reftypes-in-jit-entry-exit-stubs"
      ]
    },
    {
      "id": "js-interop-of-gc-objects",
      "title": "JS interop of GC objects",
      "description": "[Set the prototype of GC objects so that they interop with JS code](https://github.com/WebAssembly/custom-descriptors)",
      "dependsOn": [
        "custom-descriptors"
      ]
    },
    {
      "id": "js-promise-integration",
      "title": "JS promise integration",
      "description": "[Suspend and resume wasm execution in response to JS promises](https://github.com/WebAssembly/js-promise-integration)",
      "dependsOn": [
        "wasm-integrates-with-web-api-s"
      ]
    },
    {
      "id": "lazy-baseline-compilation",
      "title": "Lazy baseline compilation",
      "description": "Skip baseline compilation and only validate initially. Compile baseline functions on demand.",
      "dependsOn": [
        "optimize-the-linking-step-for-huge-modules"
      ]
    },
    {
      "id": "linear-memory-parity-with-native",
      "title": "Linear memory parity with native",
      "description": "",
      "dependsOn": []
    },
    {
      "id": "link-to-spec-for-all-instructions",
      "title": "Link to spec for all instructions",
      "description": "",
      "dependsOn": [
        "make-wasm-binaries-readable"
      ]
    },
    {
      "id": "make-wasm-binaries-readable",
      "title": "Make wasm binaries readable",
      "description": "Start an open-source [wasm-explorer] project for efficiently analyzing very large wasm module.",
      "dependsOn": []
    },
    {
      "id": "make-webidl-bindings-fast",
      "title": "Make WebIDL bindings fast",
      "description": "",
      "dependsOn": [
        "implement-component-model-webidl-bindings-in-a-dumb-way"
      ]
    },
    {
      "id": "memory-discard",
      "title": "memory.discard",
      "description": "[Allow users to give pages back to the OS](https://github.com/WebAssembly/memory-control/blob/main/proposals/memory-control/discard.md)",
      "dependsOn": [
        "linear-memory-parity-with-native"
      ]
    },
    {
      "id": "memory-map-array-buffers",
      "title": "memory.map array buffers",
      "description": "Map an array buffer into the high half of wasm memory. Uses the high-bit as guard to execute an alternative load/store path for memory accesses.",
      "dependsOn": [
        "static-memory-protection"
      ]
    },
    {
      "id": "mir-visualizer",
      "title": "MIR visualizer",
      "description": "Create an interactive HTML based iongraph tool that is easier to read and analyze.",
      "dependsOn": [
        "performance"
      ]
    },
    {
      "id": "mir-visualizer-in-profiler",
      "title": "MIR visualizer in profiler",
      "description": "Integrate the new MIR visualizer in the profiler, with sample counts for finding hot code.",
      "dependsOn": [
        "mir-visualizer"
      ]
    },
    {
      "id": "move-barrier-execution-into-ool-code",
      "title": "Move barrier execution into OOL code",
      "description": "Improve code layout for common case, reducing icache pressure and mispredictions.",
      "dependsOn": [
        "move-null-traps-into-ool-code"
      ]
    },
    {
      "id": "move-cross-instance-call-slow-path-into-ool-code",
      "title": "Move cross-instance call slow path into OOL code",
      "description": "Improve code layout for common case, reducing icache pressure and mispredictions.",
      "dependsOn": [
        "performance"
      ]
    },
    {
      "id": "move-null-traps-into-ool-code",
      "title": "Move null traps into OOL code",
      "description": "Improve code layout for common case, reducing icache pressure and mispredictions.",
      "dependsOn": [
        "move-cross-instance-call-slow-path-into-ool-code"
      ]
    },
    {
      "id": "multi-byte-access-to-arrays",
      "title": "multi-byte access to arrays",
      "description": "",
      "dependsOn": [
        "js-interop-of-gc-objects"
      ]
    },
    {
      "id": "optimize-calls-to-imports-of-known-builtins",
      "title": "Optimize calls to imports of known builtins",
      "description": "Let users import builtins like `DataView.prototype.XYZ` and have calls to that import skip the JS interpreter exit and go directly to the native implementation.",
      "dependsOn": [
        "performance"
      ]
    },
    {
      "id": "optimize-stack-map-creation-and-storage",
      "title": "Optimize stack map creation and storage",
      "description": "Allow sharing identical stack maps between call sites, speed up creation of them in baseline.",
      "dependsOn": [
        "optimize-the-linking-step-for-huge-modules"
      ]
    },
    {
      "id": "optimize-the-linking-step-for-huge-modules",
      "title": "Optimize the linking step for huge modules",
      "description": "The linking step is linear in module size and doesn't benefit much from parallelism. Find a way to speed it up.",
      "dependsOn": [
        "performance"
      ]
    },
    {
      "id": "osr-of-baseline",
      "title": "OSR of baseline",
      "description": "Add on-stack-replacement of baseline functions so that we can tier up in long running baseline code.",
      "dependsOn": [
        "call-indirect-speculative-inlining"
      ]
    },
    {
      "id": "parameterized-binary-instruction-macros",
      "title": "Parameterized binary instruction macros",
      "description": "",
      "dependsOn": [
        "shrink-wasm-binaries"
      ]
    },
    {
      "id": "performance",
      "title": "Performance",
      "description": "",
      "dependsOn": []
    },
    {
      "id": "primitive-builtins",
      "title": "Primitive builtins",
      "description": "[Builtins for manipulating JS primitives](https://github.com/WebAssembly/js-primitive-builtins)",
      "dependsOn": [
        "string-builtins-v2"
      ]
    },
    {
      "id": "regalloc2",
      "title": "regalloc2",
      "description": "Find a way to improve quality of register allocations for very hot code. Maybe import regalloc2/3?",
      "dependsOn": [
        "performance"
      ]
    },
    {
      "id": "relaxed-atomics",
      "title": "relaxed atomics",
      "description": "[Add a relaxed consistency to atomic memory accesses for improved performance](https://github.com/WebAssembly/shared-everything-threads)",
      "dependsOn": [
        "threading-parity-with-native"
      ]
    },
    {
      "id": "remove-asm-js",
      "title": "Remove asm.js",
      "description": "Less security and fuzz bugs to deal with.",
      "dependsOn": [
        "performance"
      ]
    },
    {
      "id": "renumber-the-whole-opcode-space",
      "title": "Renumber the whole opcode space",
      "description": "",
      "dependsOn": [
        "shrink-wasm-binaries"
      ]
    },
    {
      "id": "replace-stub-generators-with-ion-or-baseline",
      "title": "Replace stub generators with Ion or Baseline",
      "description": "Simplify our JIT entry/exits stubs by replacing them with special wasm opcodes and compiling them in Ion/Baseline with special prologue/epilogues.",
      "dependsOn": [
        "inline-subset-of-wasm-into-js"
      ]
    },
    {
      "id": "richer-function-view-in-wasm-explorer",
      "title": "Richer function view in wasm-explorer",
      "description": "",
      "dependsOn": [
        "make-wasm-binaries-readable"
      ]
    },
    {
      "id": "shared-function-references",
      "title": "Shared function references",
      "description": "Allow sharing a funcref across worker threads. Enables dynamic linking with shared memory, and reduces memory usage.",
      "dependsOn": [
        "relaxed-atomics"
      ]
    },
    {
      "id": "shared-gc-objects",
      "title": "Shared GC objects",
      "description": "[Add shared GC objects so GC modules can work across threads](https://github.com/WebAssembly/shared-everything-threads)",
      "dependsOn": [
        "wasm-tls-or-per-stack-context"
      ]
    },
    {
      "id": "shrink-wasm-binaries",
      "title": "Shrink wasm binaries",
      "description": "",
      "dependsOn": []
    },
    {
      "id": "sketch-of-component-model-webidl-bindings",
      "title": "Sketch of Component Model WebIDL bindings",
      "description": "Write up a document that proposes how WebIDL could bind to WebAssembly components at a medium-level of specifics. Validation that this could actually cover enough API's to be meaningful.",
      "dependsOn": [
        "wasm-integrates-with-web-api-s"
      ]
    },
    {
      "id": "sliceref",
      "title": "sliceref",
      "description": "",
      "dependsOn": [
        "js-interop-of-gc-objects"
      ]
    },
    {
      "id": "source-language-debugging-support",
      "title": "Source language debugging support",
      "description": "",
      "dependsOn": []
    },
    {
      "id": "source-phase-imports",
      "title": "Source phase imports",
      "description": "[Allow JS to import the 'source' of a module](https://github.com/tc39/proposal-source-phase-imports)",
      "dependsOn": [
        "wasm-integrates-with-web-api-s"
      ]
    },
    {
      "id": "stack-switching",
      "title": "Stack switching",
      "description": "[Suspend and resume wasm execution in wasm code](https://github.com/WebAssembly/stack-switching)",
      "dependsOn": [
        "js-promise-integration",
        "wasm-gc-parity-with-native"
      ]
    },
    {
      "id": "standalone-electron-wasm-explorer",
      "title": "Standalone electron wasm-explorer",
      "description": "",
      "dependsOn": [
        "wasm-explorer-merged-into-bytecode-alliance"
      ]
    },
    {
      "id": "static-memory-protection",
      "title": "Static memory protection",
      "description": "[Give wasm memory a no-access, read-only, and read-write regions](https://github.com/WebAssembly/memory-control/blob/main/proposals/memory-control/static-protection.md).",
      "dependsOn": [
        "byob-readable-streams"
      ]
    },
    {
      "id": "string-builtins-v2",
      "title": "String builtins V2",
      "description": "Add a builtin type import for strings for reduced type checks, and better UTF-8 support.",
      "dependsOn": [
        "type-imports"
      ]
    },
    {
      "id": "struct-headers-on-arrays",
      "title": "Struct headers on arrays",
      "description": "",
      "dependsOn": [
        "improved-array-constructors"
      ]
    },
    {
      "id": "super-instructions",
      "title": "Super instructions",
      "description": "```\nblock block block block ->\nblock 4\n```\n\n```\nlocal.get 0 local.get 4 local.get 1 ->\nlocal.get 3 (0 4 1)\n```",
      "dependsOn": [
        "shrink-wasm-binaries"
      ]
    },
    {
      "id": "support-malformed-modules-in-wasm-explorer",
      "title": "Support malformed modules in wasm-explorer",
      "description": "",
      "dependsOn": [
        "make-wasm-binaries-readable"
      ]
    },
    {
      "id": "support-more-reftypes-in-jit-entry-exit-stubs",
      "title": "Support more reftypes in JIT entry/exit stubs",
      "description": "Support more reftypes in JIT entry/exits stubs for faster entry/exit of wasm-GC code.",
      "dependsOn": [
        "performance"
      ]
    },
    {
      "id": "threading-parity-with-native",
      "title": "Threading parity with native",
      "description": "",
      "dependsOn": []
    },
    {
      "id": "type-imports",
      "title": "Type imports",
      "description": "[Allow importing a type so users can import an abstract interface that doesn't expose the exact representation](https://github.com/WebAssembly/proposal-type-imports)",
      "dependsOn": [
        "wasm-gc-parity-with-native"
      ]
    },
    {
      "id": "unparameterized-valid-instruction-macros",
      "title": "Unparameterized valid instruction macros",
      "description": "",
      "dependsOn": [
        "shrink-wasm-binaries"
      ]
    },
    {
      "id": "update-caching-to-work-with-lazy-tiering",
      "title": "Update caching to work with lazy tiering",
      "description": "Get caching working with lazy tiering.",
      "dependsOn": [
        "performance"
      ]
    },
    {
      "id": "use-gc-buffer-allocator-for-ool-data",
      "title": "Use GC buffer allocator for OOL data",
      "description": "Simplify GC by removing Malloc'ed block cache, and maybe improve performance.",
      "dependsOn": [
        "performance"
      ]
    },
    {
      "id": "wasm-decompiler",
      "title": "wasm-decompiler",
      "description": "Make a [decompiler](https://github.com/eqrion/wasm-decompile) that makes analyzing what a wasm function is doing simpler. Integrate it into wasm-explorer.",
      "dependsOn": [
        "make-wasm-binaries-readable"
      ]
    },
    {
      "id": "wasm-explorer-in-devtools",
      "title": "wasm-explorer in Devtools",
      "description": "",
      "dependsOn": [
        "wasm-explorer-merged-into-bytecode-alliance"
      ]
    },
    {
      "id": "wasm-explorer-in-github",
      "title": "wasm-explorer in Github",
      "description": "",
      "dependsOn": [
        "wasm-explorer-merged-into-bytecode-alliance"
      ]
    },
    {
      "id": "wasm-explorer-in-view-source",
      "title": "wasm-explorer in view-source",
      "description": "",
      "dependsOn": [
        "wasm-explorer-merged-into-bytecode-alliance"
      ]
    },
    {
      "id": "wasm-explorer-in-vscode",
      "title": "wasm-explorer in VSCode",
      "description": "",
      "dependsOn": [
        "wasm-explorer-merged-into-bytecode-alliance"
      ]
    },
    {
      "id": "wasm-explorer-merged-into-bytecode-alliance",
      "title": "wasm-explorer merged into bytecode alliance",
      "description": " Contribute it to the bytecode alliance and try to get external contributors.",
      "dependsOn": [
        "make-wasm-binaries-readable"
      ]
    },
    {
      "id": "wasm-gc-parity-with-native",
      "title": "Wasm-GC parity with native",
      "description": "",
      "dependsOn": []
    },
    {
      "id": "wasm-integrates-with-web-api-s",
      "title": "Wasm integrates with Web API's",
      "description": "",
      "dependsOn": []
    },
    {
      "id": "wasm-tls-or-per-stack-context",
      "title": "Wasm TLS or per-stack context",
      "description": "[Add thread-local globals or the per-stack context feature so that source language TLS works with shared functions](https://github.com/WebAssembly/shared-everything-threads)",
      "dependsOn": [
        "shared-function-references"
      ]
    }
  ]
}